export class Dictionary {
  clear() {
    this.table = {};
  }
  get(key) {
    return this.table[key];
  }
  remove(key) {
    const v = this.table[key];
    delete this.table[key];
    return v;
  }
  set(key, value) {
    this.table[key] = value;
  }
  constructor(entries) {
    this.table = {};
    if (entries) {
      entries.forEach((f) => {
        this.set(f[0], f[1]);
      });
    }
  }
  size() {
    let n = 0;
    for (const key in this.table) {
      if (this.table.hasOwnProperty(key)) {
        n++;
      }
    }
    return n;
  }
  isEmpty() {
    return this.size() < 1;
  }
  forEach(callback) {
    for (const name in this.table) {
      if (this.table.hasOwnProperty(name)) {
        const ret = callback(name, this.table[name]);
        if (ret === false) {
          return;
        }
      }
    }
  }
  containsKey(key) {
    return this.table.hasOwnProperty(key);
  }
  keys() {
    const l = [];
    for (const key in this.table) {
      if (this.table.hasOwnProperty(key)) {
        l.push(key);
      }
    }
    return l;
  }
  values() {
    const l = [];
    for (const key in this.table) {
      if (this.table.hasOwnProperty(key)) {
        l.push(this.table[key]);
      }
    }
    return l;
  }
}
